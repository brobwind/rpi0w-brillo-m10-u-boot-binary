stdin=serial
stderr=serial,vidconsole
stdout=serial,vidconsole
kernel_addr_r=0x00080000
initrd_high=0x03000000
fdt_high=0x04000000
board=rpi
mmcdev=0
gpt_partition_table=uuid_disk=CBC45837-633A-4768-B41A-167BEE738884;name=rpiboot,bootable,start=4M,size=32M,type=314F99D5-B2BF-4883-8D03-E2F2CE507D6A,uuid=1BECB7C5-5568-4813-BB3B-01EC481BE5BC;name=boot_a,size=32M,type=BB499290-B57E-49F6-BF41-190386693794,uuid=AFC3487E-D4BF-4107-92AD-8661794190E5;name=boot_b,size=32M,type=BB499290-B57E-49F6-BF41-190386693794,uuid=4DCB0DB8-7C24-4C0E-8E06-D5364AA915A2;name=system_a,size=384M,type=0F2778C4-5CC1-4300-8670-6C88B7E57ED6,uuid=4D3848DC-77EF-48F2-B02B-B9F5FF5F6F7E;name=system_b,size=384M,type=0F2778C4-5CC1-4300-8670-6C88B7E57ED6,uuid=7C7EFB02-0010-46CB-A1AD-9189A66BE85C;name=vbmeta_a,size=1024K,type=B598858A-5FE3-418E-B8C4-824B41F4ADFC,uuid=77E2089B-BCBD-4B18-B388-9A87CC3556FE;name=vbmeta_b,size=1024K,type=B598858A-5FE3-418E-B8C4-824B41F4ADFC,uuid=41A0BF99-5E3C-4037-A81A-C1673DA5F485;name=misc,size=1024K,type=6B2378B0-0FBC-4AA9-A4F6-4D6E17281C47,uuid=C46D88B7-774F-4A70-BD69-AA7594F4DC8A;name=swap,size=384M,type=0657FD6D-A4AB-43C4-84E5-0933C84B4F4F,uuid=E490FB29-9D01-4185-8497-8E35AD327089;name=userdata,size=-,type=0BB7E6ED-4424-49C0-9372-7FBAB465AB4C,uuid=E8933E96-668E-45D9-B850-72F9E0A2594F
rpi_mbr_bin=mbr.bin
rpi_bin_gz=rpiboot_32m.bin.gz
rpi_bin_gz_crc32=0xad46a330
rpi_bootloader=u-boot-dtok-rpi-b-rev2.bin u-boot-dtok-rpi-zero.bin u-boot-dtok-rpi-zero-w.bin u-boot-dtok-rpi-2-b.bin u-boot-dtok-rpi-3-b.bin u-boot-dtok-rpi-3-b-plus.bin
rpi_files=COPYING.linux LICENCE.broadcom bootcode.bin config.txt fixup_x.dat issue.txt start_x.elf uboot.env
rpi_file_addr_r=0x04000000
fastbootcmd=\
	echo "Run in fastboot mode..."; \
	if test "${board_name}" = "Model B rev2" || test "${board_name}" = "2 Model B" || test "${board_name}" = "3 Model B" || test "${board_name}" = "3 Model B+" ; then \
		setenv tftptimeout 1000 && setenv tftptimeoutcountmax 0; \
		usb start && dhcp; fastboot udp; \
	elif test "${board_name}" = "Zero" || test "${board_name}" = "Zero W" ; then \
		fastboot usb 0; \
	else \
		echo "Error: can not enter fastboot mode: board not support: ${board_name}"; \
	fi
normalbootcmd=\
	echo "Trying to boot Android from eMMC..."; \
	if test -z "${fdt_addr}" ; then \
		echo "Error: the fdt address is not set"; \
		exit 1; \
	fi; \
	\
	fdt addr ${fdt_addr}; \
	fdt get value bootargs /chosen bootargs; \
	setenv bootargs "${bootargs} androidboot.serialno=${serial#}"; \
	\
	mmc dev ${mmcdev}; \
	mmc rescan; \
	\
	if part number mmc ${mmcdev} misc control_part_number; then \
		echo "misc partition number: ${control_part_number}"; \
		ab_select slot_name mmc ${mmcdev}:${control_part_number}; \
	else \
		echo "Warning: misc partition not found"; \
		exit 1; \
	fi; \
	setenv slot_suffix _${slot_name}; \
	\
	if test -z "${slot_name}" ; then \
		echo "Warning: set slot_suffix to _a due to empty slot name"; \
		setenv slot_suffix _a; \
	fi; \
	\
	setenv bootargs_ab "androidboot.slot_suffix=${slot_suffix}"; \
	echo "A/B cmdline addition: ${bootargs_ab}"; \
	setenv bootargs "${bootargs} ${bootargs_ab}"; \
	\
	part start mmc ${mmcdev} boot${slot_suffix} boot_start; \
	if itest $? != 0 ; then \
		echo "Failed to retrieve start block for boot${slot_suffix} partition"; \
		exit 1; \
	fi; \
	part size mmc ${mmcdev} boot${slot_suffix} boot_size; \
	if itest $? != 0 ; then \
		echo "Failed to retrieve number of blocks for boot${slot_suffix} partition"; \
		exit 1; \
	fi; \
	\
	if test "${board_name}" = "Model B rev2" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-b-rev2"; \
	elif test "${board_name}" = "Zero" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-zero"; \
	elif test "${board_name}" = "Zero W" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-zero-w"; \
	elif test "${board_name}" = "2 Model B" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-2-b"; \
	elif test "${board_name}" = "3 Model B" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-3-b"; \
	elif test "${board_name}" = "3 Model B+" ; then \
		setenv bootargs "${bootargs} androidboot.board.model=rpi-3-b-plus"; \
	else \
		setenv bootargs "${bootargs} androidboot.board.model=unknown"; \
	fi; \
	\
	setexpr brdid sub "..........." "" ${serial#}; \
	if test -z "${brdid}" ; then \
		setenv bootargs "${bootargs} androidboot.board.brdid=${serial#}"; \
	else \
		setenv bootargs "${bootargs} androidboot.board.brdid=${brdid}"; \
	fi; \
	\
	mmc read ${kernel_addr_r} ${boot_start} ${boot_size}; \
	bootm ${kernel_addr_r}
bcbbootcmd=\
	if bcb load ${mmcdev} misc ; then \
		if bcb test command = bootonce-bootloader; then \
			echo "BCB: Bootloader boot..."; \
			bcb clear command; bcb store; \
			run fastbootcmd; \
		elif bcb test command = boot-recovery; then \
			echo "BCB: Recovery boot..."; \
			echo "Warning: recovery is not implemented"; \
			echo "Performing normal boot for now..."; \
			bcb clear command; bcb store; \
			run normalbootcmd; \
		else \
			echo "BCB: Normal boot requested..."; \
			run normalbootcmd; \
		fi; \
	else \
		echo "Warning: BCB is corrupted or does not exist"; \
		echo "Performing normal boot..."; \
		run normalbootcmd; \
	fi; \
	\
	run fastbootcmd; \
	\
	reset
bootstrapcmd_p1=\
	echo "Loading rpiboot files to ram..."; \
	\
	setexpr rpi_mem_reserve_start_addr ${rpi_file_addr_r} - 0x04; \
	mw.l ${rpi_mem_reserve_start_addr} 0x18000000; \
	\
	if test -n "${fdt_addr}" ; then \
		echo "Update reserve memory start address from fdt tree..."; \
		fdt addr ${fdt_addr}; \
		fdt get addr memreserve_addr / memreserve; \
		if itest $? != 0 ; then \
			echo "Warning: can not get memreserve from fdt tree"; \
		else \
			setexpr memreserve_start_addr ${memreserve_addr} + 0x03; \
			for item in 0 1 2 3; \
			do \
				cp.b ${memreserve_start_addr} ${rpi_mem_reserve_start_addr} 0x01; \
				\
				setexpr memreserve_start_addr ${memreserve_start_addr} - 0x01; \
				setexpr rpi_mem_reserve_start_addr ${rpi_mem_reserve_start_addr} + 0x01; \
			done; \
		fi; \
	fi; \
	\
	setexpr rpi_mem_reserve_start_addr ${rpi_file_addr_r} - 0x04; \
	\
	setexpr rpi_file_info_len_addr ${rpi_file_addr_r} - 0x08; \
	mw.l ${rpi_file_info_len_addr} 0x00; \
	\
	setexpr rpi_file_info_crc32_expect_addr ${rpi_file_addr_r} - 0x0c; \
	setexpr rpi_file_info_crc32_actual_addr ${rpi_file_addr_r} - 0x10; \
	mw.l ${rpi_file_info_crc32_actual_addr} 0x0badbeef; \
	\
	setexpr rpi_file_info_start_addr ${rpi_file_addr_r} - 0x10; \
	setexpr rpi_file_info_addr ${rpi_file_info_start_addr}; \
	\
	setexpr rpi_file_content_addr ${rpi_file_addr_r}; \
	\
	for item in ${rpi_files} ${rpi_bootloader} ${rpi_mbr_bin} ${rpi_bin_gz}; \
	do \
		fatsize mmc ${mmcdev}:1 ${item}; \
		if itest $? != 0 ; then \
			echo "Abort: Failed to get file size: ${item}"; \
			exit 1; \
		fi; \
		\
		setexpr rpi_file_content_addr ${rpi_file_content_addr} + 0xfff; \
		setexpr rpi_file_content_addr ${rpi_file_content_addr} \\& 0xfffff000; \
		\
		setexpr rpi_mem_remain *${rpi_mem_reserve_start_addr} - ${rpi_file_content_addr}; \
		if itest ${filesize} > ${rpi_mem_remain} ; then \
			echo "File: ${item} size too large: 0x${filesize} - 0x${rpi_mem_remain}"; \
			exit 1; \
		fi; \
		\
		setexpr rpi_file_content_start_addr ${rpi_file_info_addr} - 0x04; \
		mw.l ${rpi_file_content_start_addr} ${rpi_file_content_addr}; \
		\
		setexpr rpi_file_content_size_addr ${rpi_file_info_addr} - 0x08; \
		mw.l ${rpi_file_content_size_addr} ${filesize}; \
		\
		echo "Loading ${item} @ 0x${rpi_file_content_addr}..."; \
		fatload mmc ${mmcdev}:1 ${rpi_file_content_addr} ${item}; \
		if itest $? != 0 ; then \
			echo "Failed to load file: ${item} from eMMC"; \
			exit 1; \
		fi; \
		\
		setexpr rpi_file_content_crc32_expect_addr ${rpi_file_info_addr} - 0x0c; \
		crc32 ${rpi_file_content_addr} ${filesize} ${rpi_file_content_crc32_expect_addr}; \
		\
		setexpr rpi_file_content_crc32_actual_addr ${rpi_file_info_addr} - 0x10; \
		mw.l ${rpi_file_content_crc32_actual_addr} 0x00; \
		\
		if test ${item} = ${rpi_mbr_bin} ; then \
			setexpr rpi_mbr_bin_addr ${rpi_file_content_addr}; \
		fi; \
		if test ${item} = ${rpi_bin_gz} ; then \
			setexpr rpi_bin_gz_addr ${rpi_file_content_addr}; \
			if itest *${rpi_file_content_crc32_expect_addr} != ${rpi_bin_gz_crc32} ; then \
				echo "Abort: wrong crc32 value for ${rpi_bin_gz} expect: 0x${rpi_bin_gz_crc32}"; \
				exit 1; \
			fi; \
		fi; \
		\
		setexpr rpi_file_info_addr ${rpi_file_info_addr} - 0x10; \
		setexpr rpi_file_content_addr ${rpi_file_content_addr} + ${filesize}; \
	done; \
	\
	setexpr rpi_file_content_end_addr ${rpi_file_content_addr}; \
	setexpr rpi_file_info_addr ${rpi_file_info_addr} + 0x10; \
	\
	if itest ${rpi_file_info_addr} < ${rpi_file_info_start_addr} ; then \
		setexpr rpi_file_info_len ${rpi_file_info_start_addr} - ${rpi_file_info_addr}; \
		mw.l ${rpi_file_info_len_addr} ${rpi_file_info_len}; \
		\
		crc32 ${rpi_file_info_addr} ${rpi_file_info_len} ${rpi_file_info_crc32_expect_addr}; \
	fi; \
	\
	setexpr bootstrapcmd_rdy 0x01
bootstrapcmd_p2=\
	if test -z "${rpi_mbr_bin_addr}" ; then \
		echo "Please load ${rpi_mbr_bin} to ram first"; \
		exit 1; \
	fi; \
	if test -z "${rpi_bin_gz_addr}" ; then \
		echo "Please load ${rpi_bin_gz} to ram first"; \
		exit 1; \
	fi; \
	if test -z "${rpi_file_content_end_addr}"; then \
		echo "Error: rpi_file_content_end_addr is not set."; \
		exit 1; \
	fi; \
	\
	echo "Extracting ${rpi_bin_gz} to ram..."; \
	\
	setexpr rpi_bin_addr ${rpi_file_content_end_addr} + 0xfff; \
	setexpr rpi_bin_addr ${rpi_bin_addr} \\& 0xfffff000; \
	\
	unzip ${rpi_bin_gz_addr} ${rpi_bin_addr}; \
	if itest $? != 0 ; then \
		echo "Fatal: Can not extract ${rpi_bin_gz}"; \
		exit 1; \
	fi; \
	setexpr rpi_bin_size ${filesize}; \
	setexpr rpi_mem_remain *${rpi_mem_reserve_start_addr} - ${rpi_bin_gz_addr}; \
	if itest ${rpi_bin_size} > ${rpi_mem_remain} ; then \
		echo "The reserved memory area has been overridden by rpiboot image - 0x${rpi_mem_remain}"; \
		echo "    - rpiboot image address: 0x${rpi_bin_addr}, size: 0x${rpi_bin_size}"; \
		echo "    - reserved memory at   : 0x${rpi_mem_reserve_start_addr}"; \
		exit 1; \
	fi; \
	\
	echo "Installing MBR partition table..."; \
	mmc write ${rpi_mbr_bin_addr} 0 1; \
	\
	part size mmc ${mmcdev} 1 rpi_part_size; \
	if itest $? != 0 ; then \
		echo "Failed to get rpiboot partition size"; \
		exit 1; \
	fi; \
	\
	setexpr rpi_size ${rpi_part_size} * 0x200; \
	echo "rpiboot partition size: 0x${rpi_size}"; \
	\
	echo "Creating GPT partition table..."; \
	gpt write mmc ${mmcdev} "${gpt_partition_table}"; \
	if itest $? != 0 ; then \
		echo "Failed to install GPT partition table"; \
		exit 1; \
	fi; \
	part list mmc ${mmcdev}; \
	\
	echo "Re-install MBR partition table..."; \
	mmc write ${rpi_mbr_bin_addr} 0 1; \
	\
	if itest ${rpi_bin_size} > ${rpi_size} ; then \
		echo "Fatal: rpiboot image can not fit into rpiboot partition: 0x${rpi_bin_size} - 0x${rpi_size}"; \
		exit 1; \
	fi; \
	\
	echo "Installing rpiboot partition..."; \
	part start mmc ${mmcdev} 1 rpi_part_start; \
	mmc write ${rpi_bin_addr} ${rpi_part_start} ${rpi_part_size}; \
	\
	setexpr bootstrapcmd_rdy 0x01
bootstrapcmd_p3=\
	echo "Restore rpiboot files to rpiboot partition..."; \
	setexpr rpi_file_info_len_addr ${rpi_file_addr_r} - 0x08; \
	setexpr rpi_file_info_crc32_expect_addr ${rpi_file_addr_r} - 0x0c; \
	setexpr rpi_file_info_crc32_actual_addr ${rpi_file_addr_r} - 0x10; \
	\
	setexpr rpi_file_info_len *${rpi_file_info_len_addr}; \
	if itest ${rpi_file_info_len} > 0x1000 ; then \
		echo "Error: the length of the file info is too large: 0x${rpi_file_info_len}"; \
		exit 1; \
	fi; \
	\
	setexpr rpi_file_info_start_addr ${rpi_file_addr_r} - 0x10; \
	setexpr rpi_file_info_end_addr ${rpi_file_info_start_addr} - ${rpi_file_info_len}; \
	\
	crc32 ${rpi_file_info_end_addr} ${rpi_file_info_len} ${rpi_file_info_crc32_actual_addr}; \
	if itest.l *${rpi_file_info_crc32_expect_addr} != *${rpi_file_info_crc32_actual_addr} ; then \
		setexpr.l rpi_file_info_crc32_expect *${rpi_file_info_crc32_expect_addr}; \
		setexpr.l rpi_file_info_crc32_actual *${rpi_file_info_crc32_actual_addr}; \
		echo "Error: file info crc32 mismatch: "; \
		echo "    - expect: ${rpi_file_info_crc32_expect}"; \
		echo "    - actual: ${rpi_file_info_crc32_actual}"; \
		exit 1; \
	fi; \
	\
	setexpr rpi_file_info_addr ${rpi_file_info_start_addr}; \
	setexpr rpi_file_content_addr ${rpi_file_addr_r}; \
	\
	for item in ${rpi_files} ${rpi_bootloader}; \
	do \
		setexpr rpi_file_content_start_addr ${rpi_file_info_addr} - 0x04; \
		setexpr rpi_file_content_size_addr ${rpi_file_info_addr} - 0x08; \
		setexpr rpi_file_content_crc32_expect_addr ${rpi_file_info_addr} - 0x0c; \
		setexpr rpi_file_content_crc32_actual_addr ${rpi_file_info_addr} - 0x10; \
		\
		setexpr.l rpi_file_size *${rpi_file_content_size_addr}; \
		if itest ${rpi_file_size} <= 0 ; then \
			echo "File: ${item} wrong size: 0x${rpi_file_size}"; \
			exit 1; \
		fi; \
		\
		setexpr.l rpi_file_addr *${rpi_file_content_start_addr}; \
		\
		crc32 ${rpi_file_addr} ${rpi_file_size} ${rpi_file_content_crc32_actual_addr}; \
		\
		if itest.l *${rpi_file_content_crc32_expect_addr} != *${rpi_file_content_crc32_actual_addr} ; then \
			setexpr.l rpi_file_crc32_expect *${rpi_file_content_crc32_expect_addr}; \
			setexpr.l rpi_file_crc32_actual *${rpi_file_content_crc32_actual_addr}; \
			echo "File: ${item} crc32 mismatch: ${rpi_file_crc32_expect} - ${rpi_file_crc32_acutal}"; \
			echo "    - start: 0x${rpi_file_addr}, size: 0x${rpi_file_size}"; \
			exit 1; \
		fi; \
		mw.l ${rpi_file_content_crc32_actual_addr} 0x00; \
		\
		echo "Restore file: ${item} @ 0x${rpi_file_addr} 0x${rpi_file_size}..."; \
		fatwrite mmc ${mmcdev}:1 ${rpi_file_addr} ${item} ${rpi_file_size}; \
		if itest $? != 0 ; then \
			echo "Failed to save file: ${item} from 0x${rpi_file_addr} - 0x${rpi_file_size}"; \
			exit 1; \
		fi; \
		\
		setexpr rpi_file_info_addr ${rpi_file_info_addr} - 0x10; \
	done; \
	\
	setexpr bootstrapcmd_rdy 0x01
bootstrapcmd_p4=\
	echo "Erase boot & misc partition to prevent accidentally boot up"; \
	for item in boot_a boot_b misc; \
	do \
		part start mmc ${mmcdev} ${item} part_start; \
		if itest $? != 0 ; then \
			echo "Failed to retrieve start block for ${item} partition"; \
			continue; \
		fi; \
		part size mmc ${mmcdev} ${item} part_size; \
		if itest $? != 0 ; then \
			echo "Failed to retrieve number of blocks for ${item} partition"; \
			continue; \
		fi; \
		echo "Erasing partition: ${item} 0x${part_start} 0x${part_size}"; \
		mmc erase ${part_start} ${part_size}; \
	done; \
	\
	part start mmc ${mmcdev} userdata part_start; \
	if itest $? != 0 ; then \
		echo "Failed to retrieve start block for userdata partition"; \
		exit 1; \
	fi; \
	part size mmc ${mmcdev} userdata part_size; \
	if itest $? != 0 ; then \
		echo "Failed to retrieve number of blocks for userdata partition"; \
		exit 1; \
	fi; \
	echo "Erasing userdata partition..."; \
	if itest ${part_size} > 0x800 ; then \
		echo "Erasing first 1048576 bytes to invalidate userdata partition..."; \
		mmc erase ${part_start} 0x800; \
	else \
		echo "Warning: size of the userdata partition is too small: 0x${part_size}" blocks; \
		mmc erase ${part_start} ${part_size}; \
	fi; \
	\
	setexpr bootstrapcmd_rdy 0x01
bootstrapcmd=\
	echo "Enter bootstrap mode..."; \
	\
	echo "Check if ${rpi_mbr_bin} exists"; \
	fatsize mmc ${mmcdev}:1 ${rpi_mbr_bin}; \
	if itest $? != 0 ; then \
		echo "The ${rpi_mbr_bin} does not exist, skip bootstrap!"; \
		exit 1; \
	fi; \
	if itest ${filesize} != 0x200 ; then \
		echo "The ${rpi_mbr_bin} should be exactly 512 bytes: actually: 0x${filesize}"; \
		exit 1; \
	fi; \
	\
	for item in p1 p2 p3 p4; \
	do \
		setexpr bootstrapcmd_rdy 0x00 && run bootstrapcmd_${item}; \
		if itest ${bootstrapcmd_rdy} != 0x01; then \
			exit 1; \
		fi; \
	done; \
	\
	echo "All done! Reboot into fastboot mode..."; \
	\
	reset
bootcmd=\
	echo "Run boot command..."; \
	mmc dev ${mmcdev}; \
	mmc rescan; \
	if part number mmc ${mmcdev} misc control_part_number; then \
		run bcbbootcmd; \
	else \
		run bootstrapcmd; \
		echo "Failed to run bootstrap command, will sleep 10 seconds then reboot"; \
		sleep 10; reset; \
	fi
